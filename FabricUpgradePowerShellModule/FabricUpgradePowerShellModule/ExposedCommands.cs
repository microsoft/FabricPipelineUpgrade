// <copyright file="ExposedCommands.cs" company="Microsoft">
// Copyright (c) Microsoft. All rights reserved.
// </copyright>

using System.Management.Automation;

// These classes expose the PowerShell commands.
// The ProcessRecord method of each class immediately calls
// into the FabricUpgradeHandler.
namespace FabricUpgradePowerShellModule
{
    /// <summary>
    /// Import an ADF Support File.
    /// </summary>
    [Cmdlet(VerbsData.Import, "AdfSupportFile")]
    public class ImportAdfSupportFile : Cmdlet
    {
        [Parameter(
            Position = 0,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [ValidateNotNullOrEmpty]
        public string Progress
        {
            get { return progress; }
            set { progress = value; }
        }
        private string progress;

        [Alias("sf")]
        [Parameter(Mandatory = true)]
        public string Filename
        {
            get { return filename; }
            set { filename = value; }
        }
        private string filename;

        protected override void ProcessRecord()
        {
            WriteObject(new FabricUpgradeHandler().ImportAdfSupportFile(this.progress, this.filename).ToString());
        }
    }

    /// <summary>
    /// This cmdlet accepts a "progress" string that is generated by
    /// Import-AdfSupportFile or Import-Resolutions or Add-Resolution.
    /// It returns a new "progress" string that contains one or more
    /// Fabric Pipeline descriptions.
    /// The output from this cmdlet can be sent to Export-FabricResources.
    /// </summary>
    [Cmdlet(VerbsData.ConvertTo, "FabricResources")]
    public class ConvertToPipeline : Cmdlet
    {
        [Parameter(
            Position = 0,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [ValidateNotNullOrEmpty]
        public string Progress
        {
            get { return progress; }
            set { progress = value; }
        }
        private string progress;

        protected override void ProcessRecord()
        {
            WriteObject(new FabricUpgradeHandler().ConvertToFabricResources(this.progress).ToString());
        }
    }

    /// <summary>
    /// This cmdlet updates the "progress" field with the resolutions found in a file.
    /// If there are already resolutions, the values in this file will appear "before"
    /// the existing resolutions; therefore, the new resolutions will take precedence
    /// over the old resolutions.
    /// </summary>
    [Cmdlet(VerbsData.Import, "FabricResolutions")]
    public class ImportFabricResolutions : Cmdlet
    {
        [Parameter(
            Position = 0,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [ValidateNotNullOrEmpty]
        public string Progress
        {
            get { return progress; }
            set { progress = value; }
        }
        private string progress;

        [Alias("rf")]
        [Parameter(Mandatory = false)]
        public string ResolutionsFilename
        {
            get { return resolutionsFilename; }
            set { resolutionsFilename = value; }
        }
        private string resolutionsFilename;

        protected override void ProcessRecord()
        {
            string result = new FabricUpgradeHandler().ImportFabricResolutions(
                this.progress,
                this.resolutionsFilename).ToString();

            WriteObject(result);
        }
    }

    // This cmdlet takes the progress payload produced by ConvertTo-FabricResources,
    // and takes the workspace and AAD token from named parameters:
    // Import-AdfSupportFile '...' | ConvertTo-FabricResources | Export-FabricResources -Workspace ABC -Token 123
    // This cmdlet uploads the pipelines to the PublicApi endpoint to create/update the items.
    [Cmdlet(VerbsData.Export, "FabricResources")]
    public class ExportFabricPipeline : Cmdlet
    {
        [Parameter(
            Position = 0,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [ValidateNotNullOrEmpty]
        public string Progress
        {
            get { return progress; }
            set { progress = value; }
        }
        private string progress;

        [Parameter(Mandatory = false)]
        public string Region
        {
            get { return region; }
            set { this.region = value; }
        }
        private string region = "prod";

        [Alias("ws")]
        [Parameter(Mandatory = true)]
        public string Workspace
        {
            get { return workspaceId; }
            set { this.workspaceId = value; }
        }
        private string workspaceId;

        [Alias("ft")]
        [Parameter(Mandatory = true)]
        public string Token
        {
            get { return fabricToken; }
            set { this.fabricToken = value; }
        }
        private string fabricToken;

        protected override void ProcessRecord()
        {
            CancellationTokenSource cts = new CancellationTokenSource(TimeSpan.FromSeconds(120));
            string result = new FabricUpgradeHandler().ExportFabricResourcesAsync(
                this.progress,
                this.region,
                this.workspaceId,
                this.fabricToken,
                cts.Token).Result.ToString();

            WriteObject(result);
        }
    }

    // This cmdlet takes the progress payload produced by ConvertTo-FabricResources
    // Import-AdfSupportFile '...' | ConvertTo-FabricResources | Select-WhatIf
    // This cmdlet outputs whether the conversion to Fabric resources will succeed and alerts.
    [Cmdlet("Select", "WhatIf")]
    public class SelectWhatIf : Cmdlet
    {
        [Parameter(
            Position = 0,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [ValidateNotNullOrEmpty]
        public string Progress
        {
            get { return progress; }
            set { progress = value; }
        }
        private string progress;

        protected override void ProcessRecord()
        {
            string result = new FabricUpgradeHandler().SelectWhatIf(this.progress).ToString();
            WriteObject(result);
        }
    }
}
